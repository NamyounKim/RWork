View(doc_Prob_df)
doc_Prob_df$rown = doc_topic_df$rown
parsedData$rown = as.numeric(row.names(parsedData))
id_topic = merge(doc_topic_df, doc_Prob_df, by="rown")
id_topic = merge(id_topic, parsedData, by="rown", all.y = TRUE)
id_topic = subset(id_topic,select=c("rown","id","doc_topic","maxProb"))
id_topic = subset(id_topic,select=c("rown","id","doc_topic","maxProb"))
View(id_topic)
View(id_topic)
id_topic = subset(id_topic,select=c("rown","id","doc_topic","maxProb"))
colnames(id_topic)
id_topic = subset(id_topic,select=c("rown","doc_topic","maxProb"))
# phi는 각 단어별 토픽에 포함될 확률값 입니다.
phi = posterior(lda_tm)$terms %>% as.matrix
# theta는 각 문서별 토픽에 포함될 확률값 입니다.
theta = posterior(lda_tm)$topics %>% as.matrix
# vocab는 전체 단어 리스트 입니다.
vocab = colnames(phi)
# 각 문서별 문서 길이를 구합니다.
doc_length = vector()
doc_topic_df=as.data.frame(doc_topic)
for( i in as.numeric(row.names(doc_topic_df))){
temp = corp[[i]]$content
doc_length = c(doc_length, nchar(temp[1]))
}
# 각 단어별 빈도수를 구합니다.
new_dtm_m = as.matrix(new_dtm)
freq_matrix = data.frame(ST = colnames(new_dtm_m),
Freq = colSums(new_dtm_m))
# 위에서 구한 값들을 파라메터 값으로 넘겨서 시각화를 하기 위한 데이터를 만들어 줍니다.
source("./createNamJson_v2.R")
json_lda = createNamJson(phi = phi, theta = theta,
vocab = vocab,
doc.length = doc_length,
term.frequency = freq_matrix$Freq,
#mds.method = jsPCA #canberraPCA가 작동 안할 때 사용
mds.method = canberraPCA
)
serVis(json_lda, open.browser = T) # MAC인 경우
a = c(1,2,4)
b = list("test", 5, a)
mat = matrix( c(2, 4, 3, 1, 5, 7), # 데이터
nrow=2,         # 행의수
ncol=3,         # 열의수
byrow = TRUE)   # 행기준으로 만들기
dim(mat)
mat[1,2]
iris[,1] # 첫번째 열(column) 값 가져오기
iris[,2] # 두번째 열(column) 값 가져오기
iris[1,] # 첫번째 행(row) 값 가져오기
iris[2,] # 두번째 행(row) 값 가져오기
iris[,1:3] # 첫번째부터 세번째 열 가져오기
iris[1:3,] # 첫번째부터 세번째 행 가져오기
iris[4,2] # 네번째 행의 2번째 열 값 가져오기
iris$Sepal.Length
subset(iris, select = c(Sepal.Length))
iris[3,4]
subset(iris, iris$Sepal.Width > 4,  select = c(Sepal.Length)) # Subset 함수로 Sepal.Length, Sepal.Width 라는 이름을 갖는 열(column) 값 가져오기
install.packages("~/GitHub/NLP4kec_1.0.0.tgz", repos = NULL, type = .Platform$pkgType)
library(NLP4kec)
write.csv(iris, file = "./iris.csv", row.names = FALSE)
nrow(iris)
ncol(iris)
addRow = list(10, 20, 10, 20, "virginica")
iris = rbind(iris, addRow)
addCol = sample(1:151, 151)
addCol
colnames(iris)
colnames(iris)[6] = "ChangeColName" # 6번째 열이름 바꾸기
addCol = sample(1:151, 151)
iris = cbind(iris, addCol)
colnames(iris)[6] = "ChangeColName" # 6번째 열이름 바꾸기
colnames(iris) = c("a","b","c","d","e","f") # 모든 열이름 바꾸기
colnames(iris)[6] = "ChangeColName" # 6번째 열이름 바꾸기
colnames(iris)
colnames(iris) = c("a","b","c","d","e","f") # 모든 열이름 바꾸기
colnames(iris)
tapply(iris$Sepal.Length, iris$Species, mean) # Species별로 Sepal.Length의 평균 구하기
tapply(iris$Sepal.Length, iris$Species, mean) # Species별로 Sepal.Length의 평균 구하기
data("iris")
iris
tapply(iris$Sepal.Length, iris$Species, mean) # Species별로 Sepal.Length의 평균 구하기
addRow = list(10, 20, 10, 20, "virginica")
iris = rbind(iris, addRow)
addCol = sample(1:151, 151)
iris = cbind(iris, addCol)
colnames(iris)
colnames(iris)[6] = "ChangeColName" # 6번째 열이름 바꾸기
colnames(iris)
colnames(iris) = c("a","b","c","d","e","f") # 모든 열이름 바꾸기
colnames(iris)
tapply(iris$Sepal.Length, iris$Species, mean) # Species별로 Sepal.Length의 평균 구하기
data("iris")
iris
tapply(iris$Sepal.Length, iris$Species, mean) # Species별로 Sepal.Length의 평균 구하기
df1 = data.frame(id = c(1,2,3,4,5,6),
name=c("Jonh", "Jessica", "Tom","Rodrio","James","Alessia"))
df2 = data.frame(id=c(2,4,6,8),
location=c("Seoul","LA", "Paris","Rome"))
df1
df2
merge(df1, df2, by="id")
merge(df1, df2, all.x = TRUE)
merge(df1, df2, all.y = TRUE)
sentence = c("I like an apple.")
grepl("like", sentence)
grep("like", sentence)
gsub("like", "hate", sentence)
paste(sentence, "And I have the apple.")
substr(sentence, 4, 7)
substr(sentence, 1, 6) = "I hate"
sentence2 = c("I", "like", "an", "apple.")
grep("like", sentence)
sentence2 = c("I", "like", "an", "apple.")
grep("like", sentence2)
sentence = c("I like an apple.")
grepl("like", sentence)
grep("like", sentence)
sentence2 = c("I", "like", "an", "apple.")
grep("like", sentence2)
substr(sentence, 4, 7)
substr(sentence, 1, 6) = "I hate"
regexpr("like",sentence)
gregexpr("a", sentence)
sentence = c("I like an apple.")
gregexpr("a", sentence)
substr(sentence, 1, 6) = "I hate" # 1번째 문자에서 6문자 사이의 문자열 바꾸기
regexpr("like",sentence)
regexpr("hate",sentence)
gregexpr("a", sentence)
split = strsplit(sentence, " ")
split
b = list("test", 5, a)
b
split = unlist(split) # Vector 형식으로 바꿔주기
split
grep("an", split)
meltTest = melt(data = Cars93,
id.vars = "Type",
measure.vars = c("MPG.city", "MPG.highway"))
library(reshape2)
meltTest = melt(data = Cars93,
id.vars = "Type",
measure.vars = c("MPG.city", "MPG.highway"))
data(Cars93)
Cars93
library(MASS)
data(Cars93)
Cars93
meltTest = melt(data = Cars93,
id.vars = "Type",
measure.vars = c("MPG.city", "MPG.highway"))
head(meltTest)
a = c(1,8,5)
#1. if문
if(length(a) > 1){
mean(a)
}
length(iris[,1])
length(iris[1,])
a = c(1,8,5)
if(length(a) > 1){
mean(a)
}
if(length(a) > 4){
mean(a)
}
if(length(a) > 4){
mean(a)
} else {
a
}
#2. else 문
if(length(a) > 4){
mean(a)
} else {
print("조건에 맞지 않습니다.")
}
ifelse(length(a) > 1, mean(a), "조건에 맞지 않습니다.")
sum=0
for (i in 1:10){
sum = sum + i
}
sum
i = 1
while(i<=10){
print(i*3)
i = i+1
}
i
#5.while 문 (ex. 3의 배수만 출력하기)
i = 1
while(i<=10){
print(i*3)
i = i+1
}
sum=0
for (i in 1:10){
sum = sum * i
}
sum
sum=1
for (i in 1:10){
sum = sum * i
}
sum
5 %any% 2
5 %/% 2
5 %/% 3
5 %% 3
5 %% 2
1 %% 2
2 %% 2
x = 0
for(i in 1:20){
if((i %% 2) == 0){
x = x + i
}
}
x
myFunction = function(data, company){
temp = subset(data, data$Manufacturer == company)
sumPrice = sum(temp$Price)
return(sumPrice)
}
aa = myFunction(Cars93, "Acura")
aa
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count")
library(ggplot2)
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count")
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") + theme_minimal()
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25)) # 차트에 제목 넣기
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25), axis.text.x = element_text(family = "AppleGothic")) # 차트에 제목 넣기
library(extrafont)
loadfonts(device="postscript")
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25), axis.text.x = element_text(family = "AppleGothic")) # 차트에 제목 넣기
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25))+ theme(axis.text.x = element_text(family = "AppleGothic")) # 차트에 제목 넣기
library(extrafont)
loadfonts(device="postscript")
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25))+ theme(axis.text.x = element_text(family = "AppleGothic")) # 차트에 제목 넣기
font_import(pattern = "AppleGothic")
library(extrafont)
loadfonts(device="postscript")
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25))+ theme(axis.text= element_text(family = "AppleGothic")) # 차트에 제목 넣기
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("자동차 타입별 건수") + theme(plot.title = element_text(hjust = 0.1, size = 25, family = "AppleGothic")) # 차트에 제목 넣기
ggplot(Cars93, aes(x=Type, fill=Origin)) + geom_bar(stat = "count")
ggplot(Cars93, aes(x=Type, fill=Origin)) + geom_bar(stat = "count", position = "dodge") # Stack 하지 않기
mpg_temp = Cars93 %>% group_by(Type) %>% summarise(avgPrice = mean(Price))
library(dplyr)
mpg_temp = Cars93 %>% group_by(Type) %>% summarise(avgPrice = mean(Price))
ggplot(mpg_temp, aes(x=Type, y=avgPrice)) + geom_bar(stat = "identity") #데이터프레임 내 값 그대로
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("The Count by Car Type") + theme(plot.title = element_text(hjust = 0.1, size = 25)) # 차트에 제목 넣기
ggplot(Cars93, aes(x=Type, fill=Origin)) + geom_bar(stat = "count")
mpg_temp = Cars93 %>% group_by(Type) %>% summarise(avgPrice = mean(Price))
ggplot(mpg_temp, aes(x=Type, y=avgPrice)) + geom_bar(stat = "identity") #데이터프레임 내 값 그대로
df2 = Cars93 %>% group_by(Type, Origin) %>% summarise(n=n()) %>%
mutate(ratio = n/sum(n))
ggplot(df2, aes(x=Type, y=ratio, fill=Origin)) + geom_bar(stat = "identity")
df2
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(stat = "identity")
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=3) # 점모양 바꾸기
ggplot(Cars93, aes(x=MPG.city, y=Price, label = Manufacturer)) + geom_text(size=3) # 점 대신 라벨값 보여주기
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=2) + geom_smooth(method=lm) # 선형식 그리기
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=2) + geom_smooth() #다항식 그리기
ggplot(Cars93, aes(x=MPG.city, y=Price, color=factor(Manufacturer))) + geom_point(shape=2) #특정 범주형 값 별로 색깔 다르게 하기
ggplot(Cars93, aes(x=MPG.city, y=Price, color=factor(Manufacturer), size=EngineSize)) + geom_point(shape=18) #특정 범주형 값 별로 색깔/크기 다르게 하기
ggplot(Cars93, aes(x=factor(Manufacturer), y=Price)) + geom_boxplot() + theme(axis.text.x=element_text(angle = 45, hjust = 1))
ggplot(Cars93, aes(x=factor(Type), y=Price, fill=factor(Origin))) + geom_boxplot()
data("economics")
economics
ggplot(economics, aes(x=date, y=pop)) + geom_line(stat = "identity")
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point()
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point() +
scale_x_continuous(breaks = seq(200000, max(economics$pop), 10000)) +
theme(axis.text.x=element_text(angle = 45, hjust = 1))
economics$year = substr(economics$date,1,4)
ggplot(economics, aes(x=pop, y=unemploy, color=factor(year))) + geom_point()
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point() +
scale_x_continuous(breaks = seq(200000, max(economics$pop), 10000)) +
theme(axis.text.x=element_text(angle = 45, hjust = 1))
economics$year = substr(economics$date,1,4)
ggplot(economics, aes(x=pop, y=unemploy, color=factor(year))) + geom_point()
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point()
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point() +
scale_x_continuous(breaks = seq(200000, max(economics$pop), 10000)) +
theme(axis.text.x=element_text(angle = 45, hjust = 1))
economics$year = substr(economics$date,1,4)
ggplot(economics, aes(x=pop, y=unemploy, color=factor(year))) + geom_point()
library(corrplot)
install.packages("corrplot")
library(corrplot)
subCars93 = Cars93 %>% dpselect(Price, MPG.city, MPG.highway, EngineSize)
subCars93 = Cars93 %>% select(Price, MPG.city, MPG.highway, EngineSize)
plot(subCars93)
corrplot(corDf)
corDf = cor(subCars93)
corrplot(corDf)
subCars93 = Cars93 %>% select(Price, MPG.city, MPG.highway, EngineSize)
plot(subCars93)
corrplot(corDf)
corrplot(corDf, method = "shade", tl.srt=45)
corrplot(corDf, method = "shade", tl.srt=45, addCoef.col = "black", order="AOE")
corrplot(corDf, method = "shade", tl.srt=45, addCoef.col = "black", order="AOE", type = "lower")
remove.packages("NLP4kec")
install.packages("~/Downloads/NLP4kec_1.0.0.tgz", repos = NULL, type = .Platform$pkgType)
library("NLP4kec", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(NLP4kec)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_101")
library(NLP4kec)
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_131/")
library(rJava)
library(NLP4kec)
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(MASS)
data("Cars93")
Cars93
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count")
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") + theme_minimal()
ggplot(Cars93, aes(x=Type)) + geom_bar(stat = "count") + labs(x="Car Type") +
ggtitle("The Count by Car Type") + theme(plot.title = element_text(hjust = 0.5, size = 25)) # 차트에 제목 넣기
ggplot(Cars93, aes(x=Type, fill=Origin)) + geom_bar(stat = "count")
ggplot(Cars93, aes(x=Type, fill=Origin)) + geom_bar(stat = "count", position = "dodge") # Stack 하지 않기
mpg_temp = Cars93 %>% group_by(Type) %>% summarise(avgPrice = mean(Price))
mpg_temp
ggplot(mpg_temp, aes(x=Type, y=avgPrice)) + geom_bar(stat = "identity") #데이터셋 값 그대로
df2 = Cars93 %>% group_by(Type, Origin) %>% summarise(n=n()) %>%
mutate(ratio = n/sum(n))
df2 = Cars93 %>% group_by(Type, Origin) %>% summarise(n=n()) %>%
mutate(ratio = n/sum(n))
mpg_temp
df2
ggplot(df2, aes(x=Type, y=ratio, fill=Origin)) + geom_bar(stat = "identity")
arrange(Type1Font())
arrange(df2, Type)
arrange(df2, Type, Origin)
arrange(df2, Type, desc(Origin))
df3 = arrange(df2, Type, desc(Origin))
df3
ggplot(df3, aes(x=Type, y=ratio, fill=Origin)) + geom_bar(stat = "identity")
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(stat = "identity")
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=3) # 점모양 바꾸기
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=5) # 점모양 바꾸기
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=9) # 점모양 바꾸기
ggplot(Cars93, aes(x=MPG.city, y=Price, label = Manufacturer)) + geom_text(size=3) # 점 대신 라벨값 보여주기
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=2) + geom_smooth(method=lm) # 선형식 그리기
ggplot(Cars93, aes(x=MPG.city, y=Price)) + geom_point(shape=2) + geom_smooth() #다항식 그리기
ggplot(Cars93, aes(x=MPG.city, y=Price, color=factor(Manufacturer))) + geom_point(shape=2) #특정 범주형 값 별로 색깔 다르게 하기
ggplot(Cars93, aes(x=MPG.city, y=Price, color=factor(Manufacturer), size=EngineSize)) + geom_point(shape=18) #특정 범주형 값 별로 색깔/크기 다르게 하기
ggplot(Cars93, aes(x=factor(Manufacturer), y=Price)) + geom_boxplot() + theme(axis.text.x=element_text(angle = 45, hjust = 1))
ggplot(Cars93, aes(x=factor(Manufacturer), y=Price)) + geom_boxplot() + theme(axis.text.x=element_text(angle = 45, hjust = 1))
ggplot(Cars93, aes(x=factor(Type), y=Price, fill=factor(Origin))) + geom_boxplot()
data("economics")
economics
head(economics)
ggplot(economics, aes(x=date, y=pop)) + geom_line(stat = "identity")
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point()
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point() +
scale_x_continuous(breaks = seq(200000, 330000, 10000)) +
theme(axis.text.x=element_text(angle = 45, hjust = 1))
ggplot(economics, aes(x=pop, y=unemploy)) + geom_point()
subCars93 = Cars93 %>% dplyr::select(Price, MPG.city, MPG.highway, EngineSize)
subCars93
head(subCars93)
plot(subCars93)
corDf = cor(subCars93)
corDf
corDf
library(corrplot)
install.packages("corrplot")
corrplot(corDf)
library(corrplot)
corrplot(corDf)
corrplot(corDf, method = "shade", tl.srt=45)
corrplot(corDf, method = "shade", tl.srt=45, addCoef.col = "black", order="AOE")
corrplot(corDf, method = "shade", tl.srt=45, addCoef.col = "black", order="AOE", type = "lower")
ggplot(Cars93, aes(x=factor(Manufacturer), y=Price)) + geom_boxplot() + theme(axis.text.x=element_text(angle = 45, hjust = 1))
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
sentence1 = "류현진(30·LA다저스)이 복귀전에서 5회를 버티지 못했다. 하지만 충분히 박수를 받을만한 경기였다."
sentence2 = "샌프란시스코 자이언츠 내야수 황재균은 2일(한국시간) PNC파크에서 열린 피츠버그 파이어리츠와의 원정 시리즈 두번째 경기에서 8회초 대타로 등장, 상대 투수 후안 니카시오를 상대로 좌익수 방면 2루타를 때렸다."
extractNoun(sentence1)
sentence1 = "류현진(30·LA다저스)이 복귀전에서 5회를 버티지 못했다. 하지만 충분히 박수를 받을만한 경기였다."
extractNoun(sentence1)
useNIADic(category_dic_nms = "sports")
extractNoun(sentence1)
SimplePos22(sentence)
SimplePos22(sentence1)
library(NLP4kec)
test = text_parser(path = "./test_text.csv", language = "ko", korDicPath = "./dictionary.txt")
test
sentence1 = "류현진(30·LA다저스)이 복귀전에서 5회를 버티지 못했다. 하지만 충분히 박수를 받을만한 경기였다."
library(tm)
library(slam)
library(dplyr)
library(readr)
library(NLP4kec)
parsedData = text_parser(path = "./HomeApplication_cafe.xlsx"
,language = "ko"
,korDicPath = "./dictionary.txt")
parsedData = text_parser(path = "./HomeApplication_cafe.xlsx"
,language = "ko"
,korDicPath = "./dictionary.txt")
parsedData
parsedData[1]
parsedData = gsub(" ","  ",parsedData)
parsedData[1]
corp = VCorpus(VectorSource(parsedData))
corp
corp[[1]]
corp[[1]]$content
corp = tm_map(corp, removePunctuation)
corp = tm_map(corp, removeNumbers)
corp = tm_map(corp, tolower)
corp = tm_map(corp, removeWords, c("있다", "하다","그렇다","되다","같다","가다","없다","보다","정도"))
for (j in seq(corp))
{
corp[[j]] <- gsub("lg", "엘지", corp[[j]])
corp[[j]] <- gsub("samsung", "삼성", corp[[j]])
}
corp = tm_map(corp, PlainTextDocument)
dtm = DocumentTermMatrix(corp, control=list(removeNumbers=FALSE, wordLengths=c(2,Inf)))
dtm
colnames(dtm)
colnames(dtm) = trimws(colnames(dtm))
dtm = dtm[,nchar(colnames(dtm)) > 1]
getwd()
dtm = removeSparseTerms(dtm, as.numeric(0.99))
dtm
freq = colSums(as.matrix(dtm))
head(freq)
dtm_df = as.data.frame(as.matrix(dtm))
freq[head(order(-freq), 5)]
freq[head(order(-freq), 5)]
freq[head(order(freq), 10)]
findFreqTerms(dtm, lowfreq = 20, highfreq = 341)
names(freq)
freq
wordDf = data.frame(word=names(freq), freq=freq)
head(wordDf)
ggplot(wordDf, aes(x=word, y=freq)) + geom_bar(stat = "identity")
ggplot(head(wordDf,10), aes(x=word, y=freq)) + geom_bar(stat = "identity")
ggplot(head(arrange(wordDf,-freq),20), aes(x=reorder(word,-freq), y=freq)) + geom_bar(stat = "identity")
install.packages("wordcloud")
library(wordcloud)
pal = brewer.pal(n = 3, name = "BuGn") # n:사용할 색깔 수, name:색깔 조합 이름
wordcloud(wordDf$word # 단어
, wordDf$freq # 빈도수
, min.freq = 5 # 표현할 단어의 최소 빈도수
, colors = pal # 위에서 만든 팔레트 정보 입력
, rot.per = 0 # 단어의 회전 각도
, random.order = F # 단어의 노출 순서 랜덤 여부 결정
, scale = c(3,1)) # scale값에서 앞에 값이 커야 빈도수가 큰 단어 사이즈가 커야함
wordcloud(wordDf$word # 단어
, wordDf$freq # 빈도수
, min.freq = 5 # 표현할 단어의 최소 빈도수
, colors = pal # 위에서 만든 팔레트 정보 입력
, rot.per = 0 # 단어의 회전 각도
, random.order = F # 단어의 노출 순서 랜덤 여부 결정
, scale = c(3,1)) # scale값에서 앞에 값이 커야 빈도수가 큰 단어 사이즈가 커야함
pal = brewer.pal(n = 9, name = "BuGn") # n:사용할 색깔 수, name:색깔 조합 이름
wordcloud(wordDf$word # 단어
, wordDf$freq # 빈도수
, min.freq = 5 # 표현할 단어의 최소 빈도수
, colors = pal # 위에서 만든 팔레트 정보 입력
, rot.per = 0 # 단어의 회전 각도
, random.order = F # 단어의 노출 순서 랜덤 여부 결정
, scale = c(3,1)) # scale값에서 앞에 값이 커야 빈도수가 큰 단어 사이즈가 커야함
pal = brewer.pal(n = 5, name = "Set2") # n:사용할 색깔 수, name:색깔 조합 이름
wordcloud(wordDf$word # 단어
, wordDf$freq # 빈도수
, min.freq = 5 # 표현할 단어의 최소 빈도수
, colors = pal # 위에서 만든 팔레트 정보 입력
, rot.per = 0 # 단어의 회전 각도
, random.order = F # 단어의 노출 순서 랜덤 여부 결정
, scale = c(3,1)) # scale값에서 앞에 값이 커야 빈도수가 큰 단어 사이즈가 커야함
wordcloud(wordDf$word # 단어
, wordDf$freq # 빈도수
, min.freq = 5 # 표현할 단어의 최소 빈도수
, colors = pal # 위에서 만든 팔레트 정보 입력
, rot.per = 0.5 # 단어의 회전 각도
, random.order = F # 단어의 노출 순서 랜덤 여부 결정
, scale = c(5,1)) # scale값에서 앞에 값이 커야 빈도수가 큰 단어 사이즈가 커야함
install.packages("treemap")
library(treemap)
treemap(wordDf # 대상 데이터 설정
,title = "Word Tree Map"
,index = c("word") # 박스 안에 들어갈 변수 설정
,vSize = "freq"  # 박스 크기 기준
,fontsize.labels = 12 # 폰트 크기 설정
,palette=pal # 위에서 만든 팔레트 정보 입력
,border.col = "white") # 경계선 색깔 설정
wordcloud(wordDf$word # 단어
, wordDf$freq # 빈도수
, min.freq = 5 # 표현할 단어의 최소 빈도수
, colors = pal # 위에서 만든 팔레트 정보 입력
, rot.per = 0.5 # 단어의 회전 각도
, random.order = F # 단어의 노출 순서 랜덤 여부 결정
, scale = c(5,1)
,use.r.layout = T) # scale값에서 앞에 값이 커야 빈도수가 큰 단어 사이즈가 커야함
