{
    "contents" : "rm(list=ls())\ngc()\n\n#package check & install & load\nlibraryList <- c(\"dplyr\",\"stringi\",\"caret\",\"reshape\",\"randomForest\",\"lubridate\")\n\nfor(lib in libraryList){\n  package.checking <- find.package(lib,quiet=TRUE)\n  if(length(package.checking) == 0){\n    install.packages(lib)\n  }\n}\n\nrequire(dplyr)\nrequire(stringi)\nrequire(caret)\nrequire(reshape)\nrequire(lubridate)\nrequire(randomForest)\nrequire(e1071)\n\n#Load Data\ntest <- read.csv(file=\"./2_bike/test.csv\")\ntrain <- read.csv(file=\"./2_bike/train.csv\")\n\ntrain$year <- as.factor(year(ymd_hms(train$datetime)))\ntrain$month <- as.factor(month(ymd_hms(train$datetime)))\ntrain$hour <- as.factor(hour(ymd_hms(train$datetime)))\ntrain$weekdays <- as.factor(weekdays(ymd_hms(train$datetime)))\ntrain$dayType <- as.factor(ifelse((train$workingday==0)&(train$holiday==0),1,\n                                  ifelse((train$workingday==0)&(train$holiday==1),2,\n                                         ifelse((train$workingday==1)&(train$holiday==0),3,4))))\ntrain$diffTemp <- train$temp - train$atemp\ntrain$logCount <- log(train$count)\ntrain$logCasual <- log(train$casual+1)\ntrain$logRegistered <- log(train$registered+1)\n\ntrain<- subset(train, diffTemp <=5)\n\ntest$year <- as.factor(year(ymd_hms(test$datetime)))\ntest$month <- as.factor(month(ymd_hms(test$datetime)))\ntest$hour <- as.factor(hour(ymd_hms(test$datetime)))\ntest$weekdays <- as.factor(weekdays(ymd_hms(test$datetime)))\ntest$dayType <- as.factor(ifelse((test$workingday==0)&(test$holiday==0),1,\n                                 ifelse((test$workingday==0)&(test$holiday==1),2,\n                                        ifelse((test$workingday==1)&(test$holiday==0),3,4))))\ntest$diffTemp <- test$temp - test$atemp\n\nselectVariable <- function(data) {\n  selected <- c(\n#               \"season\",\n                \"holiday\",\n                \"workingday\",\n                \"weekend\",\n                \"weather\",\n                \"temp\",\n                \"atemp\",\n                \"humidity\",\n                \"windspeed\"\n#                \"year\",\n#                \"hour\"\n                )\n  #data$year <- year(ymd_hms(data$datetime))\n  #data$hour <- hour(ymd_hms(data$datetime))\n  \n  return(data[,selected])\n}\n\nholidayCheck <- function(data){\n  if(sum(data$holiday)==0){\n    return(subset(data, select=c(-holiday)))\n  }\n  else{\n    return(data)\n  }\n}\n\ncvtrain <- trainControl(method=\"cv\", number=5)\n\nresult <- NULL\nrmse_sum <- 0\nfor(year_i in unique(train$year)){\n  for(month_i in unique(train$month)){\n    train_s <- train[(train$year == year_i) & (train$month == month_i),]\n    test_s <- test[(test$year == year_i) & (test$month == month_i),]\n    \n    rf <- train(x=holidayCheck(selectVariable(train_s)), y=train_s$logCount, method=\"parRF\",\n                trControl=cvtrain,\n                tuneGrid=data.frame(mtry=c(5,6,7)),\n                ntree=100,\n                metric=\"RMSE\",\n                importance=TRUE,\n                preProc=c(\"center\", \"scale\"))\n    if(!is.null(grep(\"holiday\",colnames(holidayCheck(selectVariable(train_s)))))){\n      output <- predict(rf, selectVariable(test_s))\n    }\n    else{\n      output <- predict(rf, subset(selectVariable(test_s), select = c(-holiday)))\n    }\n    #test_s$count <- output\n    test_s$count <- exp(output)\n    result <- rbind(result, test_s)\n    rmse_sum <- rmse_sum + rf$results[2]\n    print(paste(year_i, \" \", month_i))\n    print(rf)\n  }\n}\nrmse_sum/48\n\nwrite.csv(subset(result, select = c(datetime,count)), file=\"./result.csv\", row.names = FALSE)\n\n\n\n\n#predict\npred <- predict(rf,test_rf)\ntest$pred <- pred\nresult <- subset(test, select = c(datetime,pred))\ncolnames(result)[2] <- \"count\"\nwrite.csv(result, file=\"./result.csv\", row.names = FALSE)\n",
    "created" : 1458889480886.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1171550615",
    "id" : "2EDB6FD6",
    "lastKnownWriteTime" : 1457052613,
    "path" : "D:/GitHub/RWork/tests/bike.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}