trian <- read.csv(".train.csv")
trian <- read.csv(".train.csv")
trian <- read.csv("./train.csv")
train <- read.csv("./train.csv")
head(train)
require(dplyr)
require(stringi)
require(ggplot2)
require(psych)
ggplot(train, aes(x=age))+geom_boxplot()
ggplot(train, aes(x=AGE))+geom_boxplot()
ggplot(train, aes(x=Age))+geom_boxplot()
ggplot(train, aes(x=factor(Age)))+geom_boxplot()
ggplot(train, aes(x=factor(Age) ))+geom_boxplot("identity")
ggplot(train, aes(x=factor(Age)))+geom_boxplot(stat ="identity")
head(train)
ggplot(train, aes(x=factor(Age)))+geom_bar(stat ="identity")
ggplot(train, aes(x=factor(Age)))+geom_bar()
summary(train)
ggplot(train, aes(x=factor(Pclass)))+geom_bar()
ggplot(train, aes(x=factor(Parch)))+geom_bar()
ggplot(train, aes(x=factor(SibSp)))+geom_bar()
ggplot(train, aes(x=factor(SibSp), fill=Survived))+geom_bar()
ggplot(train, aes(x=factor(SibSp), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(SibSp), fill=factor(Age)))+geom_bar()
ggplot(train, aes(x=factor(Age), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(pclass), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Age), fill=factor(Survived)))+geom_bar()
head(train)
ggplot(train, aes(x=factor(Pclass), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Cabin), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Embarked), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(SibSp), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Parch), fill=factor(Survived)))+geom_bar()
require(dplyr)
install.packages("R6")
require(dplyr)
head(train)
train_r <- train %>% group_by(SibSp,Survived) %>% summarise(count=n())
install.packages("lazyeval")
require(dplyr)
train_r <- train %>% group_by(SibSp,Survived) %>% summarise(count=n())
train_r
train_r <- train %>% group_by(SibSp,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
train_r
398/(398+210)
ggplot(train_r, aes(x=factor(SibSp), fill=factor(Survived)))+geom_bar()
ggplot(train_r, aes(x=factor(SibSp), fill=factor(Survived)))+geom_bar(stat = "ratio")
ggplot(train_r, aes(x=factor(SibSp), y=ration,fill=factor(Survived)))+geom_bar()
ggplot(train_r, aes(x=factor(SibSp), y=ratio,fill=factor(Survived)))+geom_bar()
ggplot(train_r, aes(x=factor(SibSp), y=ratio, fill=factor(Survived)))+geom_bar()
ggplot(train_r, aes(x=factor(SibSp), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
train_r
train_r <- train %>% group_by(Parch,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
train_r <- train %>% group_by(SibSp,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
train_p <- train %>% group_by(Parch,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
ggplot(train_p, aes(x=factor(SibSp), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_p, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
train_p
train_p[Survived=1,]
train_p[Survived==1,]
train_p[train_p$Survived==1,]
train_r[train_r$Survived==1,]
train_r
head(train)
ggplot(train, aes(x=factor(Survived), y=sum(Fare)))+geom_bar()
ggplot(train, aes(x=factor(Survived), y=sum(Fare)))+geom_bar(stat = "identity")
ggplot(train, aes(x=factor(Survived), y=Fare)+ geom_boxplot()
ggplot(train, aes(x=factor(Survived), y=Fare))+ geom_boxplot()
ggplot(train, aes(x=factor(Survived), y=Fare))+ geom_boxplot()
ggplot(train, aes(x=factor(Parch), fill=factor(Survived)))+geom_bar()
summary(train)
summary(train$Survived)
ggplot(train, aes(x=factor(Survived), y=Fare))+ geom_boxplot()
head(train)
ggplot(train, aes(x=factor(Embarked), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Sex), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Sex), fill=factor(Survived)))+geom_bar()
require(dplyr)
require(stringi)
require(ggplot2)
require(psych)
ggplot(train, aes(x=factor(Sex), fill=factor(Survived)))+geom_bar()
ggplot(train_p, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
head(train)
ggplot(train, aes(x=factor(Survived), y=Fare))+ geom_boxplot()
ggplot(train_p, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train, aes(x=factor(Sex), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Embarked), fill=factor(Survived)))+geom_bar()
train_r
head(train)
View(train)
View(train)
ggplot(train, aes(x=factor(Survived), y=Age))+ geom_boxplot()
ggplot(train, aes(Age))+ geom_histogram()
ggplot(train, aes(Age))+ geom_histogram(binwidth=.5)
ggplot(train, aes(Age, fill=factor(Survived)))+ geom_histogram()
ggplot(train, aes(Age, fill=factor(Survived)))+ geom_histogram(alpha=.5)
ggplot(train, aes(Age, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="identity")
ggplot(train, aes(Age, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="dodge")
ggplot(train, aes(Age, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="identity")
ggplot(train, aes(x=factor(Survived), y=Age))+ geom_boxplot()
ggplot(train, aes(x=factor(Embarked), fill=factor(Survived)))+geom_bar()
head(train)
ggplot(train, aes(x=factor(Pclass), fill=factor(Survived)))+geom_bar()
train_Pclass <- train %>% group_by(Pclass,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
ggplot(train_Pclass, aes(x=factor(Pclass), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train, aes(x=factor(Pclass), fill=factor(Survived)))+geom_bar()
ggplot(train, aes(x=factor(Sex), fill=factor(Survived)))+geom_bar()
ggplot(train_Parch, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
train_r <- train %>% group_by(SibSp,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
train_Parch <- train %>% group_by(Parch,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
ggplot(train_Parch, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train, aes(x=factor(Parch), fill=factor(Survived)))+geom_bar()
ggplot(train_Parch, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train, aes(x=factor(SibSp), fill=factor(Survived)))+geom_bar()
ggplot(train_r, aes(x=factor(SibSp), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train, aes(Fare, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="identity")
ggplot(train, aes(Fare, fill=factor(Sex)))+ geom_histogram(alpha=.5, position="identity")
ggplot(train, aes(Fare, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="identity")
ggplot(train, aes(x=factor(Sex), fill=factor(Survived)))+geom_bar()
table(train$Sex, train$Survived)
mytable <- with(mydata, table(A,B)) # create a 2 way table
library(ca)
install.packages(ca)
install.packages("ca")
library(ca)
mytable <- with(mydata, table(A,B)) # create a 2 way table
table(train$Sex, train$Survived)
mytable <- with(train, table(train$Sex, train$Survived)) # create a 2 way table
mytable
tt <- table(train$Sex, train$Survived)
tt
mytable
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
fit <- ca(mytable)
print(fit) # basic results
print(fit) # basic results
summary(fit) # extended results
fit
fit <- ca(mytable)
mytable <- with(train, table(train$SibSp, train$Survived)) # create a 2 way table
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
mytable <- with(train, table(train$SibSp, train$Embarked)) # create a 2 way table
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
summary(train)
mytable <- with(train, table(train$Survived, train$Embarked)) # create a 2 way table
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
mytable <- with(train, table(train$Pclass, train$Parch)) # create a 2 way table
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
ggplot(train, aes(x=factor(Pclass), fill=factor(Parch)))+geom_bar()
ggplot(train[train$Parch=='0',], aes(x=factor(Pclass), fill=factor(Parch)))+geom_bar()
ggplot(train[train$Parch!='0',], aes(x=factor(Pclass), fill=factor(Parch)))+geom_bar()
train_r
p<-ggplot(train_r, aes(x=SibSp, y=Survived, size=count, colour=ratio))
require(dplyr)
require(stringi)
require(ggplot2)
require(psych)
p<-ggplot(train_r, aes(x=SibSp, y=Survived, size=count, colour=ratio))
p
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="lightblue", high="red")+ theme(axis.text=element_text(size=12))
p<-ggplot(train_r, aes(x=SibSp, y=factor(Survived), size=count, colour=ratio))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="lightblue", high="red")+ theme(axis.text=element_text(size=12))
head(train)
train_r
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="white", high="red")+ theme(axis.text=element_text(size=12))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="black", high="red")+ theme(axis.text=element_text(size=12))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="blue", high="red")+ theme(axis.text=element_text(size=12))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="white", high="red")+ theme(axis.text=element_text(size=12))
ggplot(train[train$Parch!='0',], aes(x=factor(Pclass), fill=factor(Parch)))+geom_bar()
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages("rattle")
install.packages("rattle")
library(rpart.plot)
install.packages("rpart.plot")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
f=rpart(Survived~.,data=train, control=rpart.control(cp=0.001))
fancyRpartPlot(f)
f
train[,-train$Name]
train[,-(train$Name)]
train[,-"train$Name"]
train[,-c("train$Name")]
train[,c("train$Name")]
train[,train$Name]
train[,c(train$Name)]
train[,1]
train[,-1]
colnames(train)
train[,-4]
f=rpart(Survived~.,data=train[,-4], control=rpart.control(cp=0.001))
fancyRpartPlot(f)
plotcp(f)
fancyRpartPlot(f)
f=rpart(Survived~.,data=train[,-4], control=rpart.control(cp=0.01))
fancyRpartPlot(f)
f
colnames(train)
train2 <- subset(train , select = -c("Ticket","Name"))
train2 <- subset(train , select != c("Ticket","Name"))
train2 <- subset(train , select= -c("Ticket","Name"))
train2 <- subset(train , select= -c(Ticket,Name))
head(train2)
train2 <- subset(train , select= -c(Ticket,Name,Cabin))
f=rpart(Survived~.,data=train2, control=rpart.control(cp=0.01))
fancyRpartPlot(f)
plotcp(f)
train2$Survived <- factor(train2$Survived)
f=rpart(Survived~.,data=train2, control=rpart.control(cp=0.01))
fancyRpartPlot(f)
plotcp(f)
ggplot(train, aes(x=factor(Survived), y=Age))+ geom_boxplot()
require(dplyr)
require(stringi)
require(ggplot2)
require(psych)
ggplot(train, aes(x=factor(Survived), y=Age))+ geom_boxplot()
ggplot(train, aes(Fare, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="identity")
ggplot(train, aes(Age, fill=factor(Survived)))+ geom_histogram(alpha=.5, position="identity")
head(train)
head(train)
train_r <- train %>% group_by(SibSp,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
ggplot(train_r, aes(x=factor(SibSp), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_r, aes(x=factor(SibSp), y=count, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_r, aes(x=factor(SibSp), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
train_Parch <- train %>% group_by(Parch,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
ggplot(train_Parch, aes(x=factor(Parch), y=count, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_Parch, aes(x=factor(Parch), y=count, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_Parch, aes(x=factor(Parch), y=count, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_Parch, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
tt <- table(train$Sex, train$Survived)
mytable <- with(train, table(train$Pclass, train$Parch)) # create a 2 way table
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
library(ca)
tt <- table(train$Sex, train$Survived)
mytable <- with(train, table(train$Pclass, train$Parch)) # create a 2 way table
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
fit <- ca(mytable)
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
ggplot(train_Parch, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_Parch, aes(x=factor(Parch), y=count, fill=factor(Survived)))+geom_bar(stat = "identity")
ggplot(train_Parch, aes(x=factor(Parch), y=ratio, fill=factor(Survived)))+geom_bar(stat = "identity")
head(train)
p<-ggplot(train_r, aes(x=SibSp, y=factor(Survived), size=count, colour=ratio))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="white", high="red")+ theme(axis.text=element_text(size=12))
ggplot(train_Parch, aes(x=factor(Parch), y=count, fill=factor(Pclass)))+geom_bar(stat = "identity")
train_Pclass <- train %>% group_by(Pclass,SibSp,Survived) %>% summarise(count=n()) %>% mutate(ratio=count/sum(count))
ggplot(train_Pclass, aes(x=factor(SibSp), y=count, fill=factor(Pclass)))+geom_bar(stat = "identity")
train2 <- subset(train , select= -c(Ticket,Name,Cabin))
train2$Survived <- factor(train2$Survived)
f=rpart(Survived~.,data=train2, control=rpart.control(cp=0.01))
fancyRpartPlot(f)
seed <- 1000
train2 <- subset(train , select= -c(Ticket,Name,Cabin))
train2$Survived <- factor(train2$Survived)
f=rpart(Survived~.,data=train2, control=rpart.control(cp=0.01))
fancyRpartPlot(f)
plotcp(f)
registered=rpart(registered~hour,data=train, control=rpart.control(minbucket = 900 ,cp=0.0075))
fancyRpartPlot(f)
f
train2 <- subset(train , select= -c(Ticket,Name))
train2$Survived <- factor(train2$Survived)
f=rpart(Survived~.,data=train2, control=rpart.control(cp=0.01))
fancyRpartPlot(f)
fancyRpartPlot(f, height=2000)
test <- read.csv("./test.csv")
head(test)
pred <- predict(f, test)
teset2 <- subset(test, select = -c(Ticket,Name))
teset2 <- subset(test, select = -c(Ticket,Name,Cabin))
train2 <- subset(train , select= -c(Ticket,Name,Cabin))
train2$Survived <- factor(train2$Survived)
f=rpart(Survived~.,data=train2, control=rpart.control(cp=0.01))
test2 <- subset(test, select = -c(Ticket,Name,Cabin))
pred <- predict(f, test)
pred <- predict(f, test)
pred <- predict(f, test2)
pred
View(test2)
View(train)
tt <- table(train$Sex, train$Survived)
tt
test <- read.csv("./test_correspond.csv")
thest
test
tt <- table(test$Company, test$Product)
tt
library(ca)
library(reshape)
library(ca)
tt <- cast(test, Company ~ Product)
tt
table(tt)
prop.table(tt, 1) # row percentages
tt
as.t]
as.table(tt)
as.array(tt)
tt$Company
as.matrix(tt)
tt2 <- as.matrix(tt)
prop.table(tt2, 1) # row percentages
fit <- ca(tt2)
print(fit) # basic results
summary(fit) # extended results
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
plot(fit) # symmetric map
test <- read.csv("./test_correspond2.csv")
test
tt <- cast(test, media_type_name ~ Product)
tt
tt[is.na(tt)]
tt[is.na(tt),]
tt[,is.na(tt)]
tt[is.na(tt)]
tt
is.na(tt)
tt[is.na(tt)]
tt[is.na(tt)] <- 0
tt
tt2 <- as.matrix(tt)
fit <- ca(tt2)
print(fit) # basic results
summary(fit) # extended results
plot(fit) # symmetric map
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
chisq.test(tt2)
