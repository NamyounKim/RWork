tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고가"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고와"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "이세돌과"), "이세돌")
disuse.term <- c("아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포")
disuse.role <- c("OL")
tm <- tm[!(tm$role %in% disuse.role),]
tm <- tm[!(tm$keyword %in% disuse.term),]
odbcClose(conn)
## TM results into document keywords matrices
print("Make DTM")
tmKeyword <- fn_tm_keys(tm)
print(paste("Total Document :",nrow(tmKeyword)))
##Duplication Check
dupCheck <- duplicated(tmKeyword[,2])
tmKeyword <- tmKeyword[!dupCheck,]
## Make DTM
print(paste("Target Document :",nrow(tmKeyword)))
corp<-Corpus(DataframeSource(tmKeyword))
dtm<-DocumentTermMatrix(corp, control=list(removeNumbers=TRUE, wordLengths=c(2,Inf), weighting = weightTfIdf))
dtm <- removeSparseTerms(dtm, as.numeric(sparse))
## Create asscoiation keyword ##
t1 <-findAssocs(dtm, c("이세돌"), 0.05)
terms <- as.data.frame(attributes(t1$이세돌))
weight <- as.data.frame(t1$이세돌)
weight <- weight$`t1$이세돌`
result <- cbind(terms, weight)
t2 <-findAssocs(dtm, c("알파고"), 0.05)
terms2 <- as.data.frame(attributes(t2$알파고))
weight2 <- as.data.frame(t2$알파고)
weight2 <- weight2$`t2$알파고`
result2 <- cbind(terms2, weight2)
assDf <- merge(result, result2, by.x="names", by.y="names", all.x = TRUE, all.y = TRUE)
assDf <- replace(assDf, is.na(assDf), 0)
colnames(assDf) <- c("term","이세돌","알파고")
## Convert a Data Frame to a Numeric Matrix  ##
new_dtmMatrix <- as.matrix(assDf[,2:3])
rownames(new_dtmMatrix)<- as.character(assDf[,1])
new_dtmMatrix[new_dtmMatrix>=0.02] <- 1
new_dtmMatrix[new_dtmMatrix<0.02] <- 0
## Make Network
net <- network(new_dtmMatrix, directed=FALSE)
net %v% "mode" <- ifelse(betweenness(net)>10, "big", "small")
col = c("small" = "grey", "big" = "gold")
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col)
findAssocs(dtm, c("이세돌"), 0.05)
findAssocs(dtm, c("이세돌","알파고"), 0.05)
t3 <- findAssocs(dtm, c("이세돌","알파고"), 0.05)
head(t3)
t3[1]
t3$이세돌
attribute(t3[1])
attributes(t3[1])
t3[1]
as.data.frame(t3[1])
as.data.frame(attributes(t3$이세돌))
result
test<-as.data.frame(attributes(t3$이세돌))
head(test)
test2<-as.data.frame(t3[1])
head(test2)
test2<-as.data.frame(t3)
t3
as.data.frame(t3)
head(t2)
head(test2)
head(result)
head(assDf)
t4 <- findAssocs(dtm, c("이세돌","알파고"),0.05)
a <-as.data.frame(t4[1])
b <- as.data.frame(t4[2])
head(a)
head(b)
assDf <- merge(a, b, by.x="이세돌", by.y="알파고", all.x = TRUE, all.y = TRUE)
assDf
rm(assDf)
assDf <- merge(a, b, by.x="이세돌", by.y="알파고", all.x = TRUE, all.y = TRUE)
head(assDf)
colnames(a)
rownames(a)
a <-data.frame(t4[1])
a
head(a)
assDf <- merge(a, b, by.x=rownames(a), by.y=rownames(b), all.x = TRUE, all.y = TRUE)
t4$이세돌
aaa<-"이세돌"
aaa
t4$aaa
t4$"aaa
""
t4$"aaa"
t4$aaa
t4[,aaa]
t4[,1]
t4[1]
t4$이세돌
t4$이세돌
t4[1]
t4[2,]
colnames(t4)
col_factor(t4)
column(t4)
column(t4,1)
column(1)
t4[1]
a <-data.frame(t4[1])
a
a[1]
a[2]
colnames(a)
rownames(a)
weight <- a[1]
term <- rownames(a)
cbind(weight,term)
result
result
cbind(weight,term)
d <- cbind(weight,term)
as.matrix(d)
new_dtmMatrix
rm(list=ls())
gc()
start.time <- Sys.time()
source("/home/ruser/TextPrism/RSource/ML_functions.R")
source("/home/ruser/TextPrism/RSource/config_modeling.R")
#package check & install & load
libraryList <- c("dplyr","stringi","tm","reshape","RODBC","RODBCext","doMC","pROC")
for(lib in libraryList){
package.checking <- find.package(lib,quiet=TRUE)
if(length(package.checking) == 0){
install.packages(lib)
}
}
require(dplyr)
require(stringi)
require(tm)
require(reshape)
require(RODBC)
require(RODBCext)
require(doMC)
require(pROC)
require(slam)
require(network)
require(sna)
require(ggplot2)
require(GGally)
registerDoMC(cores = coreNum)
sparse <- '0.98'
### Font Setting ###
#library(extrafont)
#font_import()
#fonts()
#loadfonts()
############################################
## Read in TM results
############################################
conn <- odbcConnect('ccaMart',uid='trendtracker',pwd='#tt1234')
#conn <- odbcConnect('Alibaba',uid='trendtracker',pwd='#tt1234')
inputQuery <- "select crawl_data_id, crawled_date, keyword, ranking, role from t_tp_result_rank_namyun where user = 'baduc';"
tm<-sqlQuery(conn,inputQuery)
tm$keyword <- gsub(" ", "#", tm$keyword)
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고가"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고와"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "이세돌과"), "이세돌")
disuse.term <- c("아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포")
disuse.role <- c("OL")
tm <- tm[!(tm$role %in% disuse.role),]
tm <- tm[!(tm$keyword %in% disuse.term),]
odbcClose(conn)
## TM results into document keywords matrices
print("Make DTM")
tmKeyword <- fn_tm_keys(tm)
print(paste("Total Document :",nrow(tmKeyword)))
##Duplication Check
dupCheck <- duplicated(tmKeyword[,2])
tmKeyword <- tmKeyword[!dupCheck,]
## Make DTM
print(paste("Target Document :",nrow(tmKeyword)))
corp<-Corpus(DataframeSource(tmKeyword))
dtm<-DocumentTermMatrix(corp, control=list(removeNumbers=TRUE, wordLengths=c(2,Inf), weighting = weightTfIdf))
dtm <- removeSparseTerms(dtm, as.numeric(sparse))
## Create asscoiation keyword ##
t1 <-findAssocs(dtm, c("이세돌"), 0.05)
terms <- as.data.frame(attributes(t1$이세돌))
weight <- as.data.frame(t1$이세돌)
weight <- weight$`t1$이세돌`
result <- cbind(terms, weight)
t2 <-findAssocs(dtm, c("알파고"), 0.05)
terms2 <- as.data.frame(attributes(t2$알파고))
weight2 <- as.data.frame(t2$알파고)
weight2 <- weight2$`t2$알파고`
result2 <- cbind(terms2, weight2)
assDf <- merge(result, result2, by.x="names", by.y="names", all.x = TRUE, all.y = TRUE)
assDf <- replace(assDf, is.na(assDf), 0)
colnames(assDf) <- c("term","이세돌","알파고")
## Convert a Data Frame to a Numeric Matrix  ##
new_dtmMatrix <- as.matrix(assDf[,2:3])
rownames(new_dtmMatrix)<- as.character(assDf[,1])
new_dtmMatrix[new_dtmMatrix>=0.02] <- 1
new_dtmMatrix[new_dtmMatrix<0.02] <- 0
## Make Network
net <- network(new_dtmMatrix, directed=FALSE)
net %v% "mode" <- ifelse(betweenness(net)>10, "big", "small")
col = c("small" = "grey", "big" = "gold")
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col)
assDf <- merge(result, result2, by.x="names", by.y="names", all.x = TRUE, all.y = TRUE)
assDf <- replace(assDf, is.na(assDf), 0)
colnames(assDf) <- c("term","이세돌","알파고")
assDf
new_dtmMatrix <- as.matrix(assDf[,2:3])
new_dtmMatrix
rownames(new_dtmMatrix)<- as.character(assDf[,1])
new_dtmMatrix
new_dtmMatrix <- as.matrix(assDf[,2:3])
new_dtmMatrix
as.matrix(assDf)
t4 <- findAssocs(dtm, c("이세돌","알파고"),0.05)
a <-data.frame(t4[1])
weight <- a[1]
term <- rownames(a)
d <- cbind(weight,term)
d
t4 <- findAssocs(dtm, c("알파고"),0.05)
t4 <- findAssocs(dtm, c("이세돌"),0.05)
a <-data.frame(t4[1])
weight <- a[1]
term <- rownames(a)
d <- cbind(weight,term)
t4 <- findAssocs(dtm, c("알파고"),0.05)
a2 <-data.frame(t4[1])
weight2 <- a[1]
term2 <- rownames(a)
d2 <- cbind(weight,term)
d
d2
t4 <- findAssocs(dtm, c("이세돌"),0.05)
a <-data.frame(t4[1])
weight <- a[1]
term <- rownames(a)
d <- cbind(weight,term)
t4 <- findAssocs(dtm, c("알파고"),0.05)
a2 <-data.frame(t4[1])
a2 <-data.frame(t4[1])
weight2 <- a2[1]
term2 <- rownames(a2)
d2 <- cbind(weight2,term2)
head(d)
head(d2)
assDf <- merge(d, d2, by.x="term", by.y="term2", all.x = TRUE, all.y = TRUE)
head(assDf)
as.matrix(assDf[,2:])
assDf
ncol(assDf)
as.matrix(assDf[,2:ncol(assDf)])
assDf <- replace(assDf, is.na(assDf), 0)
new_dtmMatrix <- as.matrix(assDf[,2:ncol(assDf)])
new_dtmMatrix
df
d2
runApp()
runApp()
"아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포"
"아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포"
runApp()
runApp()
rm(list=ls())
gc()
print("Connect DB")
conn <- odbcConnect('ccaMart',uid='trendtracker',pwd='#tt1234')
#conn2 <- odbcConnect('smaali',uid='namyun',pwd='dighdi12')
#conn <- odbcConnect('Alibaba',uid='trendtracker',pwd='#tt1234')
print("Loading Data from DB")
#select crawl_data_id, keyword, role, ranking from t_tp_result_rank_adhoc where user = "navien";
tm<-sqlQuery(conn,inputQuery)
odbcClose(conn)
#Pre Processing
tm$keyword <- gsub(" ", "#", tm$keyword)
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고가"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고와"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "이세돌과"), "이세돌")
## Stop Term ##
disuse.term <- stri_split_fixed(stopTerm, ",")
#disuse.term <- c("아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포")
disuse.role <- c("OL")
tm <- tm[!(tm$role %in% disuse.role),]
tm <- tm[!(tm$keyword %in% disuse.term[[1]]),]
tmKeyword <- fn_tm_keys(tm)
print(paste("Total Document :",nrow(tmKeyword)))
##Duplication Check
dupCheck <- duplicated(tmKeyword[,2])
tmKeyword <- tmKeyword[!dupCheck,]
print(paste("Target Document :",nrow(tmKeyword)))
# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
source("/home/ruser/TextPrism/RSource/ML_functions.R")
require(shiny)
require(dplyr)
require(stringi)
require(tm)
require(reshape)
require(slam)
require(SnowballC)
require(RODBC)
require(RODBCext)
require(igraph)
require(network)
require(sna)
require(ggplot2)
require(GGally)
print("Connect DB")
conn <- odbcConnect('ccaMart',uid='trendtracker',pwd='#tt1234')
#conn2 <- odbcConnect('smaali',uid='namyun',pwd='dighdi12')
#conn <- odbcConnect('Alibaba',uid='trendtracker',pwd='#tt1234')
print("Loading Data from DB")
#select crawl_data_id, keyword, role, ranking from t_tp_result_rank_adhoc where user = "navien";
tm<-sqlQuery(conn,inputQuery)
odbcClose(conn)
#Pre Processing
tm$keyword <- gsub(" ", "#", tm$keyword)
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고가"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고와"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "이세돌과"), "이세돌")
inputQuery <- "select crawl_data_id, crawled_date, keyword, ranking, role from t_tp_result_rank_namyun where user = 'baduc';"
print("Connect DB")
conn <- odbcConnect('ccaMart',uid='trendtracker',pwd='#tt1234')
#conn2 <- odbcConnect('smaali',uid='namyun',pwd='dighdi12')
#conn <- odbcConnect('Alibaba',uid='trendtracker',pwd='#tt1234')
print("Loading Data from DB")
#select crawl_data_id, keyword, role, ranking from t_tp_result_rank_adhoc where user = "navien";
tm<-sqlQuery(conn,inputQuery)
odbcClose(conn)
#Pre Processing
tm$keyword <- gsub(" ", "#", tm$keyword)
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고가"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고와"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "이세돌과"), "이세돌")
disuse.term <- c("아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포")
disuse.role <- c("OL")
tm <- tm[!(tm$role %in% disuse.role),]
tm <- tm[!(tm$keyword %in% disuse.term[[1]]),]
tmKeyword <- fn_tm_keys(tm)
print(paste("Total Document :",nrow(tmKeyword)))
dupCheck <- duplicated(tmKeyword[,2])
tmKeyword <- tmKeyword[!dupCheck,]
print(paste("Target Document :",nrow(tmKeyword)))
corp<-Corpus(DataframeSource(tmKeyword))
dtm<-DocumentTermMatrix(corp, control=list(removeNumbers=TRUE, wordLengths=c(2,Inf)))
dtm <- removeSparseTerms(dtm, 0.99)
mainTerm("이세돌,알파고")
mainTerm <- "이세돌,알파고"
mTerm <- stri_split_fixed(mainTerm, ",")
mTerm <- mTerm[[1]]
assDf <- NULL
for(i in 1:length(mTerm)){
print(mTerm[i])
at <-findAssocs(dtm, mTerm[i], corlimit)
tempTerm <- mTerm[i]
atDf <- data.frame(at[1])
weight <- atDf[1]
term <- rownames(atDf)
temp <- cbind(weight,term)
if(is.null(assDf)){
assDf <- temp
}
else{
assDf <- merge(assDf, temp, by.x="term", by.y="term", all.x = TRUE, all.y = TRUE)
assDf <- replace(assDf, is.na(assDf), 0)
rm(temp)
}
}
corlimit<-0.5
for(i in 1:length(mTerm)){
print(mTerm[i])
at <-findAssocs(dtm, mTerm[i], corlimit)
tempTerm <- mTerm[i]
atDf <- data.frame(at[1])
weight <- atDf[1]
term <- rownames(atDf)
temp <- cbind(weight,term)
if(is.null(assDf)){
assDf <- temp
}
else{
assDf <- merge(assDf, temp, by.x="term", by.y="term", all.x = TRUE, all.y = TRUE)
assDf <- replace(assDf, is.na(assDf), 0)
rm(temp)
}
}
assDf
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
net
net <- network(new_dtmMatrix, directed=FALSE)
runApp()
runApp()
runApp()
rm(list=ls())
gc()
start.time <- Sys.time()
source("/home/ruser/TextPrism/RSource/ML_functions.R")
source("/home/ruser/TextPrism/RSource/config_modeling.R")
#package check & install & load
libraryList <- c("dplyr","stringi","tm","reshape","RODBC","RODBCext","doMC","pROC")
for(lib in libraryList){
package.checking <- find.package(lib,quiet=TRUE)
if(length(package.checking) == 0){
install.packages(lib)
}
}
require(dplyr)
require(stringi)
require(tm)
require(reshape)
require(RODBC)
require(RODBCext)
require(doMC)
require(pROC)
require(slam)
require(network)
require(sna)
require(ggplot2)
require(GGally)
registerDoMC(cores = coreNum)
sparse <- '0.98'
### Font Setting ###
#library(extrafont)
#font_import()
#fonts()
#loadfonts()
############################################
## Read in TM results
############################################
conn <- odbcConnect('ccaMart',uid='trendtracker',pwd='#tt1234')
#conn <- odbcConnect('Alibaba',uid='trendtracker',pwd='#tt1234')
inputQuery <- "select crawl_data_id, crawled_date, keyword, ranking, role from t_tp_result_rank_namyun where user = 'baduc';"
tm<-sqlQuery(conn,inputQuery)
tm$keyword <- gsub(" ", "#", tm$keyword)
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고가"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "알파고와"), "알파고")
tm$keyword <- replace(tm$keyword, (tm$keyword %in% "이세돌과"), "이세돌")
disuse.term <- c("아다", "와의", "수로","서울","오후","어제","판후","디어","쓰다","금지","배포")
disuse.role <- c("OL")
tm <- tm[!(tm$role %in% disuse.role),]
tm <- tm[!(tm$keyword %in% disuse.term),]
odbcClose(conn)
## TM results into document keywords matrices
print("Make DTM")
tmKeyword <- fn_tm_keys(tm)
print(paste("Total Document :",nrow(tmKeyword)))
##Duplication Check
dupCheck <- duplicated(tmKeyword[,2])
tmKeyword <- tmKeyword[!dupCheck,]
## Make DTM
print(paste("Target Document :",nrow(tmKeyword)))
corp<-Corpus(DataframeSource(tmKeyword))
dtm<-DocumentTermMatrix(corp, control=list(removeNumbers=TRUE, wordLengths=c(2,Inf), weighting = weightTfIdf))
dtm <- removeSparseTerms(dtm, as.numeric(sparse))
## Create asscoiation keyword ##
t1 <-findAssocs(dtm, c("이세돌"), 0.05)
terms <- as.data.frame(attributes(t1$이세돌))
weight <- as.data.frame(t1$이세돌)
weight <- weight$`t1$이세돌`
result <- cbind(terms, weight)
t2 <-findAssocs(dtm, c("알파고"), 0.05)
terms2 <- as.data.frame(attributes(t2$알파고))
weight2 <- as.data.frame(t2$알파고)
weight2 <- weight2$`t2$알파고`
result2 <- cbind(terms2, weight2)
assDf <- merge(result, result2, by.x="names", by.y="names", all.x = TRUE, all.y = TRUE)
assDf <- replace(assDf, is.na(assDf), 0)
colnames(assDf) <- c("term","이세돌","알파고")
## Convert a Data Frame to a Numeric Matrix  ##
new_dtmMatrix <- as.matrix(assDf[,2:3])
rownames(new_dtmMatrix)<- as.character(assDf[,1])
new_dtmMatrix[new_dtmMatrix>=0.02] <- 1
new_dtmMatrix[new_dtmMatrix<0.02] <- 0
## Make Network
net <- network(new_dtmMatrix, directed=FALSE)
net %v% "mode" <- ifelse(betweenness(net)>10, "big", "small")
col = c("small" = "grey", "big" = "gold")
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col)
degree(net)
betweenness(net)
net %v% "degree" <- degree(net)
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col)
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size="degree")
net
net$val
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size="degree")
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size.palette ="degree")
degree(net)
net %v% "degree" <- degree(net)
col = c("small" = "grey", "big" = "gold")
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size ="degree")
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size ="degree", size.cut = 1)
net %v% "dd" <- degree(net)
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size ="dd", size.cut = 1)
ggnet2(net,mode = "kamadakawai", label=TRUE, color = "mode", palette = col, size ="dd")
t1
runApp()
shiny::runApp()
