train<- subset(train, diffTemp <=5)
summary(train$dayType)
test$year <- as.factor(year(ymd_hms(test$datetime)))
test$month <- as.factor(month(ymd_hms(test$datetime)))
test$hour <- as.factor(hour(ymd_hms(test$datetime)))
test$weekdays <- as.factor(weekdays(ymd_hms(test$datetime)))
test$dayType <- as.factor(ifelse((test$workingday==0)&(test$holiday==0),1,
ifelse((test$workingday==0)&(test$holiday==1),2,
ifelse((test$workingday==1)&(test$holiday==0),3,4))))
test$diffTemp <- test$temp - test$atemp
f=rpart(count~hour,data=train, control=rpart.control(minbucket=1000, cp=0.011))
fancyRpartPlot(f)
f=rpart(count~hour,data=train, control=rpart.control(minbucket=10, cp=0.011))
fancyRpartPlot(f)
f=rpart(count~hour,data=train, control=rpart.control(cp=0.011))
fancyRpartPlot(f)
plotcp(f)
f=rpart(count~hour,data=train, control=rpart.control(cp=0.012))
fancyRpartPlot(f)
f
train$hourRange <- ifelse(train$hour %in% c(0,1,2,3,4,5), 1,
ifelse(train$hour %in% c(6,22,23), 2,
ifelse(train$hour %in% c(7,9,10,11,12,13,14,15,20,21), 3,
ifelse(train$hour %in% c(8,16,19), 4,
ifelse(train$hour %in% c(17,18),5,6)))))
summary(train$hourRange)
test$hourRange <- ifelse(test$hour %in% c(0,1,2,3,4,5), 1,
ifelse(test$hour %in% c(6,22,23), 2,
ifelse(test$hour %in% c(7,9,10,11,12,13,14,15,20,21), 3,
ifelse(test$hour %in% c(8,16,19), 4,
ifelse(test$hour %in% c(17,18),5,6)))))
train$tempRange <- ifelse(train$temp < 13, 1,
ifelse((train$temp >=13) & (train$temp < 23), 2,
ifelse((train$temp >=23) & (train$temp < 30), 3,
ifelse((train$temp >=30), 4,5))))
train$humidityRange <- ifelse(train$humidity >= 66, 1,
ifelse((train$humidity >= 46) & (train$humidity < 66), 2,
ifelse((train$humidity < 46), 3, 4)))
test$tempRange <- ifelse(test$temp < 13, 1,
ifelse((test$temp >=13) & (test$temp < 23), 2,
ifelse((test$temp >=23) & (test$temp < 30), 3,
ifelse((test$temp >=30), 4,5))))
test$humidityRange <- ifelse(test$humidity >= 66, 1,
ifelse((test$humidity >= 46) & (test$humidity < 66), 2,
ifelse((test$humidity < 46), 3, 4)))
train$tempRange <- as.factor(train$tempRange)
train$humidityRange <- as.factor(train$humidityRange)
train$hourRange <- as.factor(train$hourRange)
test$tempRange <- as.factor(test$tempRange)
test$humidityRange <- as.factor(test$humidityRange)
test$hourRange <- as.factor(test$hourRange)
source(file = "./function.R")
rm(list=ls())
gc()
test <- read.csv(file="./2_bike/test.csv")
train <- read.csv(file="./2_bike/train.csv")
dataProcessing(train,test)
source(file = "./function.R")
dataProcessing(train,test)
rm(list=ls())
gc()
source(file = "./function.R")
#Load Data
train <- read.csv(file="./2_bike/train.csv")
test <- read.csv(file="./2_bike/test.csv")
dataProcessing(train,test)
rm(list=ls())
gc()
source(file = "./function.R")
train <- read.csv(file="./2_bike/train.csv")
test <- read.csv(file="./2_bike/test.csv")
train <- trainDataProcessing(train)
test <- testDataProcessing(test)
summary(train$dayType)
train$tempRange <- ifelse(train$temp < 13, 1,
ifelse((train$temp >=13) & (train$temp < 23), 2,
ifelse((train$temp >=23) & (train$temp < 30), 3,
ifelse((train$temp >=30), 4,5))))
train$humidityRange <- ifelse(train$humidity >= 66, 1,
ifelse((train$humidity >= 46) & (train$humidity < 66), 2,
ifelse((train$humidity < 46), 3, 4)))
test$tempRange <- ifelse(test$temp < 13, 1,
ifelse((test$temp >=13) & (test$temp < 23), 2,
ifelse((test$temp >=23) & (test$temp < 30), 3,
ifelse((test$temp >=30), 4,5))))
test$humidityRange <- ifelse(test$humidity >= 66, 1,
ifelse((test$humidity >= 46) & (test$humidity < 66), 2,
ifelse((test$humidity < 46), 3, 4)))
train$hourRange <- ifelse(train$hour %in% c(0,1,2,3,4,5), 1,
ifelse(train$hour %in% c(6,22,23), 2,
ifelse(train$hour %in% c(7,9,10,11,12,13,14,15,20,21), 3,
ifelse(train$hour %in% c(8,16,19), 4,
ifelse(train$hour %in% c(17,18),5,6)))))
test$hourRange <- ifelse(test$hour %in% c(0,1,2,3,4,5), 1,
ifelse(test$hour %in% c(6,22,23), 2,
ifelse(test$hour %in% c(7,9,10,11,12,13,14,15,20,21), 3,
ifelse(test$hour %in% c(8,16,19), 4,
ifelse(test$hour %in% c(17,18),5,6)))))
train$tempRange <- as.factor(train$tempRange)
train$humidityRange <- as.factor(train$humidityRange)
train$hourRange <- as.factor(train$hourRange)
test$tempRange <- as.factor(test$tempRange)
test$humidityRange <- as.factor(test$humidityRange)
test$hourRange <- as.factor(test$hourRange)
rm(list=ls())
gc()
#package check & install & load
libraryList <- c("dplyr","stringi","caret","reshape","randomForest","lubridate","ggplot2","psych")
for(lib in libraryList){
package.checking <- find.package(lib,quiet=TRUE)
if(length(package.checking) == 0){
install.packages(lib)
}
}
require(dplyr)
require(stringi)
require(caret)
require(reshape)
require(lubridate)
require(randomForest)
require(e1071)
require(ggplot2)
require(psych)
source(file = "./function.R")
#Load Data
train <- read.csv(file="./2_bike/train.csv")
test <- read.csv(file="./2_bike/test.csv")
#Data preprocessing
train <- trainDataProcessing(train)
test <- testDataProcessing(test)
result <- NULL
rmse_sum <- NULL
rsquared_sum <- NULL
rsIndex <- 1
cvtrain <- trainControl(method="cv", number=5)
grid <- data.frame(mtry=c(4,5,6,7,8,9,10,11,12,13))
for(index_i in unique(train$hourRange)){
train_s <- train[(train$hourRange == index_i),]
test_s <- test[(test$hourRange == index_i),]
rf <- train(x=selectVariable(train_s), y=train_s$logCount, method="parRF",
trControl=cvtrain,
tuneGrid=grid,
ntree=100,
metric="RMSE",
importance=TRUE
#preProc=c("center", "scale")
)
output <- predict(rf, selectVariable(test_s))
#test_s$count <- output
test_s$count <- exp(output)
result <- rbind(result, test_s)
rmse_sum[rsIndex] <- rf$results[2][match(rf$bestTune$mtry, grid$mtry),]
rsquared_sum[rsIndex] <- rf$results[3][match(rf$bestTune$mtry, grid$mtry),]
print(paste(index_i))
print(rmse_sum[rsIndex])
rsIndex <- rsIndex+1
}
mean(rmse_sum)
mean(rsquared_sum)
write.csv(subset(result, select = c(datetime,count)), file="./result.csv", row.names = FALSE, fileEncoding="UTF-8")
rmse_sum
rmseSumDf
rmseSumDf <- as.data.frame(rmse_sum)
colnames(rmseSumDf) <- c("rmse")
rmseSumDf
rm(list=ls())
gc()
#package check & install & load
libraryList <- c("dplyr","stringi","caret","reshape","randomForest","lubridate","ggplot2","psych")
for(lib in libraryList){
package.checking <- find.package(lib,quiet=TRUE)
if(length(package.checking) == 0){
install.packages(lib)
}
}
require(dplyr)
require(stringi)
require(caret)
require(reshape)
require(lubridate)
require(randomForest)
require(e1071)
require(ggplot2)
require(psych)
source(file = "./function.R")
#Load Data
train <- read.csv(file="./2_bike/train.csv")
test <- read.csv(file="./2_bike/test.csv")
train <- trainDataProcessing(train)
accuracy <- c(69.7,81.1,77.2,84.4,86.3,78.3,86.3,86.36,70.1, 86.2,82.5,77.7)
length(accuracy)
accuracy <- c(69.7,81.1,77.2,84.4,86.3,78.3,86.3,86.36,70.1, 86.2,82.5,77.7,82.5)
t.test(accuracy, mu=80)
accuracy <- c(74.7,81.1,77.2,84.4,86.3,78.3,86.3,86.36,75.1, 86.2,82.5,77.7,82.5)
t.test(accuracy, mu=80)
length(accuracy)
t.test(accuracy, mu>80)
t.test(accuracy, mu=80)
t.test(accuracy, mu=80, alternative =c("greater"))
t.test(accuracy, mu=80, alternative =c("greater"), conf.level=0.95)
heads <- rbinom(1, size = 100, prob = .5)
heads
prop.test(x=74.7, n=100, p=0.8)
prop.test(x=79.7, n=100, p=0.8)
prop.test(x=80, n=100, p=0.8)
prop.test(x = 485, # number of success
+           n = 1000, # sample size
+           p=0.50, # proportion of success
+
+           alternative = c("two.sided"), # two-sided test
+           # alternative = c("greater"), # right-sided test
+           # alternative = c("less"),# left-sided test
+
+           conf.level = 0.95) # confidence level
prop.test(x = 485, # number of success
n = 1000, # sample size
p=0.50, # proportion of success
alternative = c("two.sided"), # two-sided test
conf.level = 0.95) # confidence level
0.95^2
0.95^10
0.9^10
0.99^10
0.98^10
0.98^10
rm(list = ls())
source("D:/개인자료/Rproject_NEED/RSC/NEED_functions.R")
FLEX_TWT <- read.csv("DAT/GarbageFiltered_flex.csv", stringsAsFactors = F)
FLEX_ORG <- read.csv("DAT/원문추출_usflex.csv", stringsAsFactors = F)
flex.text.vec <- c(FLEX_TWT$content, FLEX_ORG$content)
rm(FLEX_TWT, FLEX_ORG)
disuse.term <- c("can", "will", "also", "still", "always", "finally", "likely",
"really", "2014", "2015", "just")
pre.term  <- c("devices",  "iphones", "apples",  "companies",
"displays", "edges",   "images",  "payments",  "phones",
"samsungs", "screens", "sensors", "sizes")
post.term <- c("device",   "iphone",  "apple",   "company",
"display",  "edge",    "image",   "payment",   "phone",
"samsung",  "screen",  "sensor",  "size")
text.vec = flex.text.vec
text.vec <- fn_pretreatment_text(text.vec)
text.vec <- fn_cleansing_text(text.vec, disuse.term)
text.vec <- fn_map_term(text.vec, pre.term, post.term)
term.list  <- fn_text_to_term(text.vec)
source("D:/개인자료/Rproject_NEED/RSC/NEED_functions.R")
source("./NEED_functions.R")
source("./NEED_functions.R")
source("../NEED_functions.R")
getwd
getwd()
train <- read.csv(file="./2_bike/train.csv")
test <- read.csv(file="./2_bike/test.csv")
summary(train)
head(train)
head(test)
colnames(train)
colnames(test)
mean(temp)
mean(train$temp)
head(train$season)
head(train,10)
head(test,10)
head(train$season,7)
version
#package check & install & load
libraryList <- c("dplyr","stringi","caret","reshape","randomForest","lubridate","ggplot2","psych","doParallel")
for(lib in libraryList){
package.checking <- find.package(lib,quiet=TRUE)
if(length(package.checking) == 0){
install.packages(lib)
}
}
install.packages(c("evaluate", "FactoMineR", "formatR", "nlme"))
barplot(train_season$count, names.arg=c('spring','summer','fall','winter'), xlab='season', ylab='number of total rentals')
train_season <- aggregate(count ~ season, train, sum)
barplot(train_season$count, names.arg=c('spring','summer','fall','winter'), xlab='season', ylab='number of total rentals')
train$year <- as.POSIXlt(train$datetime)$year+1900
boxplot(count ~ year, train, xlab='Year', ylab='number of total rentals')
boxplot(count ~ hour, train, xlab='Hour', ylab='number of total rentals')
hourtime<-strftime(train$datetime, format="%H")
head(hourtime,7)
newData<-data.frame(cbind(hourtime, train$season, train$holiday, train$workingday, train$weather, train$temp, train$atemp, train$humidity, train$windspeed, train$casual, train$registered, train$count))
head(newData,7)
answer4<-aggregate(train$count~hourtime, newData, mean)
answer4
head(hourtime,7)
answer8<-cor(train$temp, train$count)
answer8
boxplot(train$count~substr(train$datetime, 1, 4), data=train)
boxplot(train$count~substr(train$datetime, 12, 20), data=train)
ggplot(, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + theme(axis.text=element_text(size=12), legend.position="bottom")
library(ggplot2)
library(psych)
ggplot(, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + theme(axis.text=element_text(size=12), legend.position="bottom") + stat_summary(fun.y=mean)
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y="mean") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train[train$year=='2012',], aes(x=factor(hour), y=count, fill=factor(workingday))) + geom_boxplot() + theme(axis.text=element_text(size=12))
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y="mean") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED",alpha = .6,size = 1) + stat_summary(fun.y="mean") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED",alpha = .6,size = 1) + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train[train$year=='2012',], aes(x=factor(hour), y=count, fill=factor(workingday))) + geom_boxplot() + theme(axis.text=element_text(size=12))
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED",alpha = .6,size = 1) + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED",fill=year) + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED",fill="year") + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED") + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED") + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED") + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED", size=3) + stat_summary(fun.y="mean",geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point") + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=year),outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=3) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(aes(fill=factor(year)),outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=3) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=3) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
p<-ggplot(train_m, aes(x=season, y=weather, size=rentCount, colour=temp))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="lightblue", high="red")+ theme(axis.text=element_text(size=12))
p<-ggplot(train, aes(x=season, y=weather, size=rentCount, colour=temp))
p + geom_point() + scale_size_area(max_size = 25) + scale_colour_gradient(low="lightblue", high="red")+ theme(axis.text=element_text(size=12))
pairs.panels(subset(train, select = c(count,casual,registered,diffTemp,temp,atemp)))
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=year)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=whether)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=wether)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=weather)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=factor(weather))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=count, fill=factor(season))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=casual, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=casual, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
pairs.panels(subset(train, select = c(count,casual,registered,diffTemp,temp,atemp)))
pairs.panels(subset(train, select = c(count,temp,atemp,humidity, windspeed)))
ggplot(temp, aes(x=factor(hour), y=rentCount, fill=category))+ geom_bar(stat = "identity", width = 0.8, position = "dodge") + theme(axis.text=element_text(size=12)) + scale_fill_brewer(palette="Set2")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
train <- trainDataProcessing(train)
train <- trainDataProcessing(train)
train <- read.csv(file="./2_bike/train.csv")
train <- trainDataProcessing(train)
require(dplyr)
require(stringi)
require(caret)
require(reshape)
require(lubridate)
require(randomForest)
require(e1071)
require(ggplot2)
require(psych)
require(doParallel)
source(file = "./function.R")
train <- trainDataProcessing(train)
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(weekdays))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(weekdays))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
train$weekdays
ggplot(train, aes(x=factor(hour), y=registered, fill=weekdays)) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=weekdays)) + geom_boxplot(outlier.colour = "RED")  + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=weekdays)) + geom_boxplot(outlier.colour = "RED")  + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(weekdays), y=registered)) + geom_boxplot(outlier.colour = "RED")  + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=weekdays)) + geom_boxplot(outlier.colour = "RED") + theme(axis.text=element_text(size=12), legend.position="bottom")
library(ggplot2)
library(psych)
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
ggplot(train, aes(x=factor(hour), y=registered, fill=factor(year))) + geom_boxplot(outlier.colour = "RED") + stat_summary(fun.y=mean,geom = "point", size=2) + theme(axis.text=element_text(size=12), legend.position="bottom")
pairs.panels(subset(train, select = c(count,diffTemp)))
train<- subset(train, diffTemp <=5)
pairs.panels(subset(train, select = c(count,diffTemp)))
data("iris")
iris
library(googlevis)
library("googlevis")
library("googleVis")
library(googleVis)
install.packages("googleVis")
head(iris)
library(googleVis)
line <- gvisLineChart(iris)
plot(line)
line <- gvisLineChart(iris, options = list(heights=600))
plot(line)
line <- gvisLineChart(iris, options = list(heights=1000))
plot(line)
line <- gvisLineChart(iris, options = list(height=1000))
plot(line)
head(iris)
line <- gvisLineChart(iris, "Species", options = list(height=1000))
plot(line)
line <- gvisBarChart(iris, "Species", options = list(height=1000))
plot(line)
line <- gvisBarChart(iris, "Species", "Petal.Length", options = list(height=1000))
plot(line)
aggregate(iris,Species~Petal.Length )
aggregate(iris,Species~Petal.Length,sum )
aggregate(Species~Petal.Length,iris,sum )
aggregate(Species ~ Petal.Length, iris, sum)
aggregate(Species ~ Petal.Length, iris, sum)
iris
aggregate(Petal.Length ~ Species, iris, sum)
iris2<-aggregate(Petal.Length ~ Species, iris, sum)
line <- gvisBarChart(iris2, "Species", "Petal.Length", options = list(height=1000))
plot(line)
iris2<-aggregate(Petal.Length ~ Species,Sepal.Width , iris, sum)
iris2<-aggregate(Petal.Length ~ c(Species,Sepal.Width) , iris, sum)
iris2<-aggregate(Petal.Length ~ list(Species,Sepal.Width) , iris, sum)
iris2
iris2<-aggregate( c(Petal.Length, Sepal.Length) ~ Species , iris, sum)
iris2<-aggregate( list(Petal.Length, Sepal.Length) ~ Species , iris, sum)
iris2<-aggregate(Petal.Length ~ Species, iris, sum)
line <- gvisBarChart(iris2, "Species", "Petal.Length", options = list(height=1000))
plot(line)
line <- gvisComboChart(iris2, "Species", "Petal.Length", options = list(height=1000))
plot(line)
scatter <- gvisScatterChart(iris[,1:2])
plot(scatter)
scatter <- gvisScatterChart(iris[,1:2] , options = list(height=1000))
plot(scatter)
scatter <- gvisScatterChart(iris[,1:2] , options = list(height=1000,
vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}"))
plot(scatter)
scatter <- gvisScatterChart(iris[,1:2] , options = list(height=1000,
vAxis="Sepal.Length",
hAxis="{title:'height (in)'}"))
plot(scatter)
scatter <- gvisScatterChart(iris[,1:2] , options = list(height=1000,
vAxis="{title:'Sepal.Length'}",
hAxis="{title:'Sepal.Width'}"))
plot(scatter)
plot(scatter)
install.packages("googleVis")
library(googleVis)
data(iris)
head(iris)
bar <- gvisBarChart(iris)
plot(bar)
test <- aggregate(Petal.Length ~ Species, iris, sum)
test
bar <- gvisBarChart(test)
plot(bar)
bar <- gvisBarChart(test, options = list(height=500))
plot(bar)
wine_red <- read.csv(file = "./1_wine/winequality-red.csv" , sep=";")
head(wine_red)
wine_red$quality <- factor(wine_red$quality)
head(wine_red)
fit <- princomp(wine_red, cor=TRUE)
fit <- princomp(wine_red)
wine_red <- read.csv(file = "./1_wine/winequality-red.csv" , sep=";")
fit <- princomp(wine_red)
wine_red$quality <- factor(wine_red$quality)
head(wine_red)
fit <- princomp(wine_red[,-12], cor=TRUE)
fit
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
library(psych)
fit <- principal(wine_red[,-12], nfactors=5, rotate="varimax")
fit # print results
fit <- factanal(wine_red[,-12], 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
fit <- princomp(wine_red[,-12], cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
fit2 <- factanal(wine_red[,-12], 3, rotation="varimax")
print(fit2, digits=2, cutoff=.3, sort=TRUE)
load <- fit2$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
text(load,labels=names(wine_red[,-12]),cex=.7) # add variable names
fit2
load
load <- fit2$loadings[,1:2]
print(fit2, digits=2, cutoff=.3, sort=TRUE)
print(fit2$loadings, cutoff=.3, sort=TRUE)
corMat <- cor(wine_red[,-12])
corMat
faPC  <- fa(r=corMat, nfactors=2, n.obs=N, rotate="varimax")
faPC  <- fa(r=corMat, nfactors=2, rotate="varimax")
faPC
fit2.diagram(faPC)
faPC  <- fa(r=corMat, nfactors=3, rotate="varimax")
faPC
fit2
faPC$score.cor
fa$score
factor.plot(faPC, cut=0.5)
fa.diagram(faPC)
fa.parallel(faPC)
fa.parallel(X)
fa.parallel(wine_red[,-12])
fa.parallel(wine_red[,-12])
faPC  <- fa(r=corMat, nfactors=4, rotate="varimax")
factor.plot(faPC, cut=0.5)
fa.diagram(faPC)
vss(wine_red[,-12], rotate="varimax")
